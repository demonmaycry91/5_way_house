"""Add Google OAuth fields to User model

Revision ID: ad17abff2eeb
Revises: 8c25d96b3500
Create Date: 2025-08-13 18:00:40.398149

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ad17abff2eeb'
down_revision = '8c25d96b3500'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('location', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_location_name'), ['name'])

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_role_name'), ['name'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email', sa.String(length=120), nullable=True))
        batch_op.add_column(sa.Column('google_id', sa.String(length=120), nullable=True))
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=200),
               nullable=True)
        batch_op.create_index(batch_op.f('ix_user_google_id'), ['google_id'], unique=True)
        batch_op.create_unique_constraint(batch_op.f('uq_user_email'), ['email'])
        batch_op.create_unique_constraint(batch_op.f('uq_user_username'), ['username'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_user_username'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_user_email'), type_='unique')
        batch_op.drop_index(batch_op.f('ix_user_google_id'))
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=200),
               nullable=False)
        batch_op.drop_column('google_id')
        batch_op.drop_column('email')

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_role_name'), type_='unique')

    with op.batch_alter_table('location', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_location_name'), type_='unique')

    # ### end Alembic commands ###
